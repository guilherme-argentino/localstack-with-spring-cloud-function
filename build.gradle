plugins {
    id "java"
    id 'org.jetbrains.kotlin.jvm' version '1.7.10'
    id "org.jetbrains.kotlin.plugin.spring" version '1.7.10'
    id 'org.springframework.boot' version '2.5.5'
    id "io.spring.dependency-management" version '1.0.11.RELEASE'
    id "com.github.johnrengelman.shadow" version '7.0.0'
}

group = 'org.localstack.sampleproject'
version = '1.0-SNAPSHOT'
sourceCompatibility = 17

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

ext {
    springCloudVersion = "3.2.7"
    awsLambdaLog4jVersion = "1.5.1"
    awsLambdaJavaEventsVersion = "3.11.0"
    jacksonVersion = '2.13.4.2'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"

    implementation "org.springframework.cloud:spring-cloud-starter-function-web:$springCloudVersion"
    implementation "org.springframework.cloud:spring-cloud-function-adapter-aws:$springCloudVersion"

    implementation "com.amazonaws:aws-lambda-java-log4j2:$awsLambdaLog4jVersion"
    implementation "com.amazonaws:aws-lambda-java-events:$awsLambdaJavaEventsVersion"

    implementation "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"

    testImplementation 'org.jetbrains.kotlin:kotlin-test'
}

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions.jvmTarget = '17'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '17'
}

import com.github.jengelman.gradle.plugins.shadow.transformers.*

// Configure the main class
jar {
    manifest {
        attributes 'Start-Class': 'org.localstack.sampleproject.Application'
    }
}

// Build a fatjar (with dependencies) for aws lambda
shadowJar {
    transform(Log4j2PluginsCacheFileTransformer)

    dependencies {
        exclude(
                dependency("org.springframework.cloud:spring-cloud-function-web:${springCloudVersion}")
        )
    }

    // Required for Spring
    mergeServiceFiles()

    append 'META-INF/spring.handlers'
    append 'META-INF/spring.schemas'
    append 'META-INF/spring.tooling'

    transform(PropertiesFileTransformer) {
        paths = ['META-INF/spring.factories']
        mergeStrategy = "append"
    }
}

assemble.dependsOn shadowJar